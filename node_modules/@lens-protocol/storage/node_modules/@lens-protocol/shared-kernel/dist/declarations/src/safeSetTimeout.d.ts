type TSafeSetTimeoutOptions = {
    poolingTimeout: number;
};
/**
 * Safe version of `setTimeout` that should support
 * 1. Large milliseconds delays (larger than 2147483647)
 * 2. Hibernation/Sleep
 *
 * @param fn - callback to be invoked after
 * @param ms - milliseconds to wait
 * @param options - timer options
 *
 * Note: `safeSetTimeout` should be only used when really needed
 *        as processor overhead is bigger than with normal `setTimeout`
 * @returns timerId Use `clearSafeTimeout(timerId)` to cancel timeout
 */
export declare const safeSetTimeout: (fn: () => void, ms: number, options?: TSafeSetTimeoutOptions) => number;
/**
 * Cancel timeout created with `safeSetTimeout`.
 */
export declare const clearSafeTimeout: (timerId: number) => void;
export {};
