import type { PromiseResult } from '@lens-protocol/shared-kernel';
import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { CredentialsExpiredError, NotAuthenticatedError } from '../consts/errors';
import { UserSigNoncesFragment } from './graphql/nonces.generated';
/**
 * Query the current nonces of the `lensHub` and the `periphery` of the authenticated user.
 *
 * - `periphery` includes profile metadata and approval follow.
 * - `lensHub` includes everything else minus unfollow which is a nonce on the `followNftAddress` contract.
 *
 * @group LensClient Modules
 */
export declare class Nonces {
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication: Authentication);
    /**
     * Fetch user nonces.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @returns {@link PromiseResult} with {@link UserSigNoncesFragment}
     *
     * @example
     * ```ts
     * const result = await client.nonces.fetch();
     * ```
     */
    fetch(): PromiseResult<UserSigNoncesFragment, CredentialsExpiredError | NotAuthenticatedError>;
}
