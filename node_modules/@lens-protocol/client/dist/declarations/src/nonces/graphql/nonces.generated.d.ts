import * as Types from '../../graphql/types.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type UserSigNoncesFragment = {
    lensHubOnChainSigNonce: number;
    peripheryOnChainSigNonce: number;
};
export type UserSigNoncesQueryVariables = Types.Exact<{
    [key: string]: never;
}>;
export type UserSigNoncesQuery = {
    result: UserSigNoncesFragment;
};
export declare const UserSigNoncesFragmentDoc: import("graphql").DocumentNode;
export declare const UserSigNoncesDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    UserSigNonces(variables?: UserSigNoncesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: UserSigNoncesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
