import * as Types from '../../graphql/types.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type AuthChallengeQueryVariables = Types.Exact<{
    address: Types.Scalars['EthereumAddress'];
}>;
export type AuthChallengeQuery = {
    result: {
        text: string;
    };
};
export type AuthVerifyQueryVariables = Types.Exact<{
    accessToken: Types.Scalars['Jwt'];
}>;
export type AuthVerifyQuery = {
    result: boolean;
};
export type AuthAuthenticateMutationVariables = Types.Exact<{
    address: Types.Scalars['EthereumAddress'];
    signature: Types.Scalars['Signature'];
}>;
export type AuthAuthenticateMutation = {
    result: {
        accessToken: string;
        refreshToken: string;
    };
};
export type AuthRefreshMutationVariables = Types.Exact<{
    refreshToken: Types.Scalars['Jwt'];
}>;
export type AuthRefreshMutation = {
    result: {
        accessToken: string;
        refreshToken: string;
    };
};
export declare const AuthChallengeDocument: import("graphql").DocumentNode;
export declare const AuthVerifyDocument: import("graphql").DocumentNode;
export declare const AuthAuthenticateDocument: import("graphql").DocumentNode;
export declare const AuthRefreshDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    AuthChallenge(variables: AuthChallengeQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: AuthChallengeQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    AuthVerify(variables: AuthVerifyQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: AuthVerifyQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    AuthAuthenticate(variables: AuthAuthenticateMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: AuthAuthenticateMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    AuthRefresh(variables: AuthRefreshMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: AuthRefreshMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
