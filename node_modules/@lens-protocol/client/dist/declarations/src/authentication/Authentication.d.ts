import { EthereumAddress, PromiseResult } from '@lens-protocol/shared-kernel';
import { LensConfig } from '../consts/config';
import { CredentialsExpiredError, NotAuthenticatedError } from '../consts/errors';
/**
 * Authentication for Lens API.
 *
 * @group LensClient Modules
 */
export interface IAuthentication {
    /**
     * Generate a challenge string for the wallet to sign.
     *
     * @param address - The wallet address
     * @returns A challenge string
     */
    generateChallenge(address: EthereumAddress): Promise<string>;
    /**
     * Authenticate the user with the wallet address and signature of the challenge.
     *
     * @param address - The wallet address
     * @param signature - The signature of the challenge
     */
    authenticate(address: EthereumAddress, signature: string): Promise<void>;
    /**
     * Check if the user is authenticated. If the credentials are expired, try to refresh them.
     *
     * @returns Whether the user is authenticated
     */
    isAuthenticated(): Promise<boolean>;
    /**
     * Verify that the access token is signed by the server and the user.
     *
     * @param accessToken - The access token to verify
     * @returns Whether the access token is valid
     */
    verify(accessToken: string): Promise<boolean>;
    /**
     * Get the access token. If it expired, try to refresh it.
     *
     * @returns The access token
     */
    getAccessToken(): PromiseResult<string, CredentialsExpiredError | NotAuthenticatedError>;
}
/**
 * Authentication for Lens API. Request challenge, authenticate, manage credentials.
 */
export declare class Authentication implements IAuthentication {
    private readonly api;
    private readonly storage;
    constructor(config: LensConfig);
    generateChallenge(address: EthereumAddress): Promise<string>;
    authenticate(address: EthereumAddress, signature: string): Promise<void>;
    isAuthenticated(): Promise<boolean>;
    verify(accessToken: string): Promise<boolean>;
    getAccessToken(): PromiseResult<string, CredentialsExpiredError | NotAuthenticatedError>;
    getRequestHeader(): PromiseResult<Record<string, string>, CredentialsExpiredError | NotAuthenticatedError>;
    private buildHeader;
}
