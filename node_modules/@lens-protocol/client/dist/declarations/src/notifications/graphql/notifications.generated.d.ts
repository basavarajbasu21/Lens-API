import * as Types from '../../graphql/types.generated';
import { WalletFragment, ProfileFragment, PostFragment, CommentFragment, MirrorFragment, CommonPaginatedResultInfoFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type NewFollowerNotificationFragment = {
    __typename: 'NewFollowerNotification';
    notificationId: string;
    createdAt: string;
    isFollowedByMe: boolean;
    wallet: WalletFragment;
};
export type NewCollectNotificationFragment = {
    __typename: 'NewCollectNotification';
    notificationId: string;
    createdAt: string;
    wallet: WalletFragment;
    collectedPublication: CommentFragment | MirrorFragment | PostFragment;
};
export type NewMirrorNotificationFragment = {
    __typename: 'NewMirrorNotification';
    notificationId: string;
    createdAt: string;
    profile: ProfileFragment;
    publication: CommentFragment | PostFragment;
};
export type NewCommentNotificationFragment = {
    __typename: 'NewCommentNotification';
    notificationId: string;
    createdAt: string;
    profile: ProfileFragment;
    comment: CommentFragment;
};
export type NewMentionNotificationFragment = {
    __typename: 'NewMentionNotification';
    notificationId: string;
    createdAt: string;
    mentionPublication: CommentFragment | PostFragment;
};
export type NewReactionNotificationFragment = {
    __typename: 'NewReactionNotification';
    notificationId: string;
    createdAt: string;
    reaction: Types.ReactionTypes;
    profile: ProfileFragment;
    publication: CommentFragment | MirrorFragment | PostFragment;
};
export type NotificationsQueryVariables = Types.Exact<{
    request: Types.NotificationRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type NotificationsQuery = {
    result: {
        items: Array<NewCollectNotificationFragment | NewCommentNotificationFragment | NewFollowerNotificationFragment | NewMentionNotificationFragment | NewMirrorNotificationFragment | NewReactionNotificationFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export declare const NewFollowerNotificationFragmentDoc: import("graphql").DocumentNode;
export declare const NewCollectNotificationFragmentDoc: import("graphql").DocumentNode;
export declare const NewMirrorNotificationFragmentDoc: import("graphql").DocumentNode;
export declare const NewCommentNotificationFragmentDoc: import("graphql").DocumentNode;
export declare const NewMentionNotificationFragmentDoc: import("graphql").DocumentNode;
export declare const NewReactionNotificationFragmentDoc: import("graphql").DocumentNode;
export declare const NotificationsDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    Notifications(variables: NotificationsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: NotificationsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
