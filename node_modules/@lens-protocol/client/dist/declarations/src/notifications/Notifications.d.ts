import type { PromiseResult } from '@lens-protocol/shared-kernel';
import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { CredentialsExpiredError, NotAuthenticatedError } from '../consts/errors';
import type { NotificationRequest } from '../graphql/types.generated';
import { PaginatedResult } from '../helpers';
import { NewCollectNotificationFragment, NewCommentNotificationFragment, NewFollowerNotificationFragment, NewMentionNotificationFragment, NewMirrorNotificationFragment, NewReactionNotificationFragment } from './graphql/notifications.generated';
export type NotificationFragment = NewCollectNotificationFragment | NewCommentNotificationFragment | NewFollowerNotificationFragment | NewMentionNotificationFragment | NewMirrorNotificationFragment | NewReactionNotificationFragment;
/**
 * Notifications on activity for a profile including collects, comment, new followers, and mirrors.
 *
 * @group LensClient Modules
 */
export declare class Notifications {
    private readonly config;
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication: Authentication);
    /**
     * Fetch notifications.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the query
     * @param observerId - Optional id of a profile that is the observer for this request
     * @returns {@link PromiseResult} with array of {@link NotificationFragment} wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.notifications.fetch({
     *  profileId: '0x0185',
     * });
     * ```
     */
    fetch(request: NotificationRequest, observerId?: string): PromiseResult<PaginatedResult<NotificationFragment>, CredentialsExpiredError | NotAuthenticatedError>;
}
