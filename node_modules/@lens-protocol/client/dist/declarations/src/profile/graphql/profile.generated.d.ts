import * as Types from '../../graphql/types.generated';
import { ProfileFragment, CommonPaginatedResultInfoFragment, FollowingFragment, FollowerFragment, RelayerResultFragment, RelayErrorFragment, Eip712TypedDataDomainFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type ProfileQueryVariables = Types.Exact<{
    request: Types.SingleProfileQueryRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type ProfileQuery = {
    result: ProfileFragment | null;
};
export type ProfileStatsFragment = {
    __typename: 'ProfileStats';
    totalCollects: number;
    totalComments: number;
    totalFollowers: number;
    totalFollowing: number;
    totalMirrors: number;
    totalPosts: number;
    totalPublications: number;
    commentsTotal: number;
    postsTotal: number;
    mirrorsTotal: number;
    publicationsTotal: number;
};
export type ProfileStatsQueryVariables = Types.Exact<{
    request: Types.SingleProfileQueryRequest;
    sources: Array<Types.Scalars['Sources']> | Types.Scalars['Sources'];
}>;
export type ProfileStatsQuery = {
    result: {
        stats: ProfileStatsFragment;
    } | null;
};
export type ProfilesQueryVariables = Types.Exact<{
    request: Types.ProfileQueryRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type ProfilesQuery = {
    result: {
        items: Array<ProfileFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type RecommendedProfilesQueryVariables = Types.Exact<{
    options: Types.RecommendedProfileOptions;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type RecommendedProfilesQuery = {
    result: Array<ProfileFragment>;
};
export type MutualFollowersProfilesQueryVariables = Types.Exact<{
    request: Types.MutualFollowersProfilesQueryRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type MutualFollowersProfilesQuery = {
    result: {
        items: Array<ProfileFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type DoesFollowQueryVariables = Types.Exact<{
    request: Types.DoesFollowRequest;
}>;
export type DoesFollowQuery = {
    result: Array<{
        __typename: 'DoesFollowResponse';
        follows: boolean;
        followerAddress: string;
        profileId: string;
        isFinalisedOnChain: boolean;
    }>;
};
export type FollowingQueryVariables = Types.Exact<{
    request: Types.FollowingRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type FollowingQuery = {
    result: {
        items: Array<FollowingFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type FollowersQueryVariables = Types.Exact<{
    request: Types.FollowersRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type FollowersQuery = {
    result: {
        items: Array<FollowerFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type FollowerNftOwnedTokenIdsQueryVariables = Types.Exact<{
    request: Types.FollowerNftOwnedTokenIdsRequest;
}>;
export type FollowerNftOwnedTokenIdsQuery = {
    result: {
        __typename: 'FollowerNftOwnedTokenIds';
        followerNftAddress: string;
        tokensIds: Array<string>;
    } | null;
};
export type PendingApprovalFollowsQueryVariables = Types.Exact<{
    request: Types.PendingApprovalFollowsRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type PendingApprovalFollowsQuery = {
    result: {
        items: Array<ProfileFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type ProfileInterestsQueryVariables = Types.Exact<{
    [key: string]: never;
}>;
export type ProfileInterestsQuery = {
    result: Array<string>;
};
export type CreateProfileMutationVariables = Types.Exact<{
    request: Types.CreateProfileRequest;
}>;
export type CreateProfileMutation = {
    result: RelayErrorFragment | RelayerResultFragment;
};
export type BurnProfileTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            BurnWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: {
            name: string;
            chainId: number;
            version: string;
            verifyingContract: string;
        };
        value: {
            nonce: number;
            deadline: string;
            tokenId: string;
        };
    };
};
export type CreateBurnProfileTypedDataMutationVariables = Types.Exact<{
    request: Types.BurnProfileRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateBurnProfileTypedDataMutation = {
    result: BurnProfileTypedDataFragment;
};
export type SetDefaultProfileTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            SetDefaultProfileWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: {
            name: string;
            chainId: number;
            version: string;
            verifyingContract: string;
        };
        value: {
            nonce: number;
            deadline: string;
            wallet: string;
            profileId: string;
        };
    };
};
export type CreateSetDefaultProfileTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateSetDefaultProfileRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateSetDefaultProfileTypedDataMutation = {
    result: SetDefaultProfileTypedDataFragment;
};
export type SetProfileImageUriTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            SetProfileImageURIWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: {
            name: string;
            chainId: number;
            version: string;
            verifyingContract: string;
        };
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            imageURI: string;
        };
    };
};
export type CreateSetProfileImageUriTypedDataMutationVariables = Types.Exact<{
    request: Types.UpdateProfileImageRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateSetProfileImageUriTypedDataMutation = {
    result: SetProfileImageUriTypedDataFragment;
};
export type CreateSetProfileImageUriViaDispatcherMutationVariables = Types.Exact<{
    request: Types.UpdateProfileImageRequest;
}>;
export type CreateSetProfileImageUriViaDispatcherMutation = {
    result: ({
        __typename: 'RelayError';
    } & RelayErrorFragment) | ({
        __typename: 'RelayerResult';
    } & RelayerResultFragment);
};
export type SetProfileMetadataTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            SetProfileMetadataURIWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: {
            name: string;
            chainId: number;
            version: string;
            verifyingContract: string;
        };
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            metadata: string;
        };
    };
};
export type CreateSetProfileMetadataTypedDataMutationVariables = Types.Exact<{
    request: Types.CreatePublicSetProfileMetadataUriRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateSetProfileMetadataTypedDataMutation = {
    result: SetProfileMetadataTypedDataFragment;
};
export type CreateSetProfileMetadataViaDispatcherMutationVariables = Types.Exact<{
    request: Types.CreatePublicSetProfileMetadataUriRequest;
}>;
export type CreateSetProfileMetadataViaDispatcherMutation = {
    result: ({
        __typename: 'RelayError';
    } & RelayErrorFragment) | ({
        __typename: 'RelayerResult';
    } & RelayerResultFragment);
};
export type SetDispatcherTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            SetDispatcherWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: {
            name: string;
            chainId: number;
            version: string;
            verifyingContract: string;
        };
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            dispatcher: string;
        };
    };
};
export type CreateSetDispatcherTypedDataMutationVariables = Types.Exact<{
    request: Types.SetDispatcherRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateSetDispatcherTypedDataMutation = {
    result: SetDispatcherTypedDataFragment;
};
export type FollowTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            FollowWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: Eip712TypedDataDomainFragment;
        value: {
            nonce: number;
            deadline: string;
            profileIds: Array<string>;
            datas: Array<string>;
        };
    };
};
export type CreateFollowTypedDataMutationVariables = Types.Exact<{
    request: Types.FollowRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateFollowTypedDataMutation = {
    result: FollowTypedDataFragment;
};
export type UnfollowTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            BurnWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: Eip712TypedDataDomainFragment;
        value: {
            nonce: number;
            deadline: string;
            tokenId: string;
        };
    };
};
export type CreateUnfollowTypedDataMutationVariables = Types.Exact<{
    request: Types.UnfollowRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateUnfollowTypedDataMutation = {
    result: UnfollowTypedDataFragment;
};
export type SetFollowModuleTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            SetFollowModuleWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: {
            name: string;
            chainId: number;
            version: string;
            verifyingContract: string;
        };
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            followModule: string;
            followModuleInitData: string;
        };
    };
};
export type CreateSetFollowModuleTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateSetFollowModuleRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateSetFollowModuleTypedDataMutation = {
    result: SetFollowModuleTypedDataFragment;
};
export type SetFollowNftUriTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            SetFollowNFTURIWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: {
            name: string;
            chainId: number;
            version: string;
            verifyingContract: string;
        };
        value: {
            nonce: number;
            profileId: string;
            deadline: string;
            followNFTURI: string;
        };
    };
};
export type CreateSetFollowNftUriTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateSetFollowNftUriRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateSetFollowNftUriTypedDataMutation = {
    result: SetFollowNftUriTypedDataFragment;
};
export type AddProfileInterestMutationVariables = Types.Exact<{
    request: Types.AddProfileInterestsRequest;
}>;
export type AddProfileInterestMutation = {
    addProfileInterests: void | null;
};
export type RemoveProfileInterestMutationVariables = Types.Exact<{
    request: Types.RemoveProfileInterestsRequest;
}>;
export type RemoveProfileInterestMutation = {
    removeProfileInterests: void | null;
};
export type DismissRecommendedProfilesMutationVariables = Types.Exact<{
    request: Types.DismissRecommendedProfilesRequest;
}>;
export type DismissRecommendedProfilesMutation = {
    dismissRecommendedProfiles: void | null;
};
export type ProfileGuardianResultFragment = {
    protected: boolean;
    disablingProtectionTimestamp: string | null;
};
export type ProfileGuardianQueryVariables = Types.Exact<{
    request: Types.ProfileGuardianRequest;
}>;
export type ProfileGuardianQuery = {
    result: ProfileGuardianResultFragment;
};
export declare const ProfileStatsFragmentDoc: import("graphql").DocumentNode;
export declare const BurnProfileTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const SetDefaultProfileTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const SetProfileImageUriTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const SetProfileMetadataTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const SetDispatcherTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const FollowTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const UnfollowTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const SetFollowModuleTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const SetFollowNftUriTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const ProfileGuardianResultFragmentDoc: import("graphql").DocumentNode;
export declare const ProfileDocument: import("graphql").DocumentNode;
export declare const ProfileStatsDocument: import("graphql").DocumentNode;
export declare const ProfilesDocument: import("graphql").DocumentNode;
export declare const RecommendedProfilesDocument: import("graphql").DocumentNode;
export declare const MutualFollowersProfilesDocument: import("graphql").DocumentNode;
export declare const DoesFollowDocument: import("graphql").DocumentNode;
export declare const FollowingDocument: import("graphql").DocumentNode;
export declare const FollowersDocument: import("graphql").DocumentNode;
export declare const FollowerNftOwnedTokenIdsDocument: import("graphql").DocumentNode;
export declare const PendingApprovalFollowsDocument: import("graphql").DocumentNode;
export declare const ProfileInterestsDocument: import("graphql").DocumentNode;
export declare const CreateProfileDocument: import("graphql").DocumentNode;
export declare const CreateBurnProfileTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateSetDefaultProfileTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateSetProfileImageUriTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateSetProfileImageUriViaDispatcherDocument: import("graphql").DocumentNode;
export declare const CreateSetProfileMetadataTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateSetProfileMetadataViaDispatcherDocument: import("graphql").DocumentNode;
export declare const CreateSetDispatcherTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateFollowTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateUnfollowTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateSetFollowModuleTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateSetFollowNftUriTypedDataDocument: import("graphql").DocumentNode;
export declare const AddProfileInterestDocument: import("graphql").DocumentNode;
export declare const RemoveProfileInterestDocument: import("graphql").DocumentNode;
export declare const DismissRecommendedProfilesDocument: import("graphql").DocumentNode;
export declare const ProfileGuardianDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    Profile(variables: ProfileQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfileQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ProfileStats(variables: ProfileStatsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfileStatsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    Profiles(variables: ProfilesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfilesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    RecommendedProfiles(variables: RecommendedProfilesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: RecommendedProfilesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    MutualFollowersProfiles(variables: MutualFollowersProfilesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: MutualFollowersProfilesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    DoesFollow(variables: DoesFollowQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: DoesFollowQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    Following(variables: FollowingQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: FollowingQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    Followers(variables: FollowersQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: FollowersQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    FollowerNftOwnedTokenIds(variables: FollowerNftOwnedTokenIdsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: FollowerNftOwnedTokenIdsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    PendingApprovalFollows(variables: PendingApprovalFollowsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: PendingApprovalFollowsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ProfileInterests(variables?: ProfileInterestsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfileInterestsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateProfile(variables: CreateProfileMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateProfileMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateBurnProfileTypedData(variables: CreateBurnProfileTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateBurnProfileTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetDefaultProfileTypedData(variables: CreateSetDefaultProfileTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetDefaultProfileTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetProfileImageURITypedData(variables: CreateSetProfileImageUriTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetProfileImageUriTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetProfileImageURIViaDispatcher(variables: CreateSetProfileImageUriViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetProfileImageUriViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetProfileMetadataTypedData(variables: CreateSetProfileMetadataTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetProfileMetadataTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetProfileMetadataViaDispatcher(variables: CreateSetProfileMetadataViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetProfileMetadataViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetDispatcherTypedData(variables: CreateSetDispatcherTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetDispatcherTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateFollowTypedData(variables: CreateFollowTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateFollowTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateUnfollowTypedData(variables: CreateUnfollowTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateUnfollowTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetFollowModuleTypedData(variables: CreateSetFollowModuleTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetFollowModuleTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateSetFollowNFTUriTypedData(variables: CreateSetFollowNftUriTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateSetFollowNftUriTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    AddProfileInterest(variables: AddProfileInterestMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: AddProfileInterestMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    RemoveProfileInterest(variables: RemoveProfileInterestMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: RemoveProfileInterestMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    DismissRecommendedProfiles(variables: DismissRecommendedProfilesMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: DismissRecommendedProfilesMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ProfileGuardian(variables: ProfileGuardianQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfileGuardianQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
