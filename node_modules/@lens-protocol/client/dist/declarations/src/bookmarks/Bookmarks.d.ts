import type { PromiseResult } from '@lens-protocol/shared-kernel';
import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { CredentialsExpiredError, NotAuthenticatedError } from '../consts/errors';
import type { PublicationFragment } from '../graphql/types';
import type { PublicationProfileBookmarkRequest, PublicationsProfileBookmarkedQueryRequest } from '../graphql/types.generated';
import { PaginatedResult } from '../helpers';
/**
 * Bookmarks are the posts, comments and mirrors saved in a dedicated list private to each profile.
 *
 * @group LensClient Modules
 */
export declare class Bookmarks {
    private readonly config;
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication?: Authentication);
    /**
     * Fetch all publications bookmarked by a profile
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the query
     * @param observerId - The optional observer Profile ID
     * @returns Publications wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.bookmarks.fetch({
     *   profileId: '0x123',
     * });
     * ```
     */
    fetch(request: PublicationsProfileBookmarkedQueryRequest, observerId?: string): Promise<PaginatedResult<PublicationFragment>>;
    /**
     * Adds a publication to the profile's bookmarks.
     * The profile must be owned by the authenticated wallet.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the mutation
     * @returns void
     *
     * @example
     * ```ts
     * const result = await client.bookmarks.add({
     *   profileId: '0x123',
     *   publicationId: '0x123-0x456',
     * });
     * ```
     */
    add(request: PublicationProfileBookmarkRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Removes a publication to the profile's bookmarks.
     * The profile must be owned by the authenticated wallet.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the mutation
     * @returns void
     *
     * @example
     * ```ts
     * const result = await client.bookmarks.remove({
     *   profileId: '0x123',
     *   publicationId: '0x123-0x456',
     * });
     * ```
     */
    remove(request: PublicationProfileBookmarkRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
}
