import * as Types from '../../graphql/types.generated';
import { Eip712TypedDataDomainFragment, PostFragment, CommentFragment, MirrorFragment, CommonPaginatedResultInfoFragment, WalletFragment, RelayerResultFragment, RelayErrorFragment, CreateDataAvailabilityPublicationResultFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type PublicationStatsFragment = {
    __typename: 'PublicationStats';
    totalAmountOfMirrors: number;
    totalAmountOfCollects: number;
    totalAmountOfComments: number;
    totalUpvotes: number;
    totalDownvotes: number;
    commentsTotal: number;
};
export type MediaOutputFragment = {
    altTag: string | null;
    cover: string | null;
    item: string;
    source: Types.PublicationMediaSource | null;
    type: string | null;
};
export type PublicMediaResultsFragment = {
    signedUrl: string;
    media: MediaOutputFragment;
};
export type CreatePostTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            PostWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: Eip712TypedDataDomainFragment;
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            contentURI: string;
            collectModule: string;
            collectModuleInitData: string;
            referenceModule: string;
            referenceModuleInitData: string;
        };
    };
};
export type CreateCommentTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            CommentWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: Eip712TypedDataDomainFragment;
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            contentURI: string;
            profileIdPointed: string;
            pubIdPointed: string;
            collectModule: string;
            collectModuleInitData: string;
            referenceModuleData: string;
            referenceModule: string;
            referenceModuleInitData: string;
        };
    };
};
export type CreateMirrorTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            MirrorWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: Eip712TypedDataDomainFragment;
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            profileIdPointed: string;
            pubIdPointed: string;
            referenceModuleData: string;
            referenceModule: string;
            referenceModuleInitData: string;
        };
    };
};
export type CreateCollectTypedDataFragment = {
    id: string;
    expiresAt: string;
    typedData: {
        types: {
            CollectWithSig: Array<{
                name: string;
                type: string;
            }>;
        };
        domain: Eip712TypedDataDomainFragment;
        value: {
            nonce: number;
            deadline: string;
            profileId: string;
            pubId: string;
            data: string;
        };
    };
};
export type PublicationQueryVariables = Types.Exact<{
    request: Types.PublicationQueryRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type PublicationQuery = {
    result: CommentFragment | MirrorFragment | PostFragment | null;
};
export type PublicationStatsQueryVariables = Types.Exact<{
    request: Types.PublicationQueryRequest;
    sources: Array<Types.Scalars['Sources']> | Types.Scalars['Sources'];
}>;
export type PublicationStatsQuery = {
    result: {
        stats: PublicationStatsFragment;
    } | {
        stats: PublicationStatsFragment;
    } | {
        stats: PublicationStatsFragment;
    } | null;
};
export type PublicationsQueryVariables = Types.Exact<{
    request: Types.PublicationsQueryRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type PublicationsQuery = {
    result: {
        items: Array<CommentFragment | MirrorFragment | PostFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type ValidatePublicationMetadataQueryVariables = Types.Exact<{
    metadata: Types.PublicationMetadataV2Input;
}>;
export type ValidatePublicationMetadataQuery = {
    validatePublicationMetadata: {
        __typename: 'PublicationValidateMetadataResult';
        valid: boolean;
        reason: string | null;
    };
};
export type WhoCollectedPublicationQueryVariables = Types.Exact<{
    request: Types.WhoCollectedPublicationRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type WhoCollectedPublicationQuery = {
    result: {
        items: Array<WalletFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type ProfilePublicationsForSaleQueryVariables = Types.Exact<{
    request: Types.ProfilePublicationsForSaleRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type ProfilePublicationsForSaleQuery = {
    result: {
        items: Array<CommentFragment | PostFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type PublicationMetadataStatusQueryVariables = Types.Exact<{
    request: Types.GetPublicationMetadataStatusRequest;
}>;
export type PublicationMetadataStatusQuery = {
    result: {
        __typename: 'PublicationMetadataStatus';
        reason: string | null;
        status: Types.PublicationMetadataStatusType;
    };
};
export type CreatePostTypedDataMutationVariables = Types.Exact<{
    request: Types.CreatePublicPostRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreatePostTypedDataMutation = {
    result: CreatePostTypedDataFragment;
};
export type CreatePostViaDispatcherMutationVariables = Types.Exact<{
    request: Types.CreatePublicPostRequest;
}>;
export type CreatePostViaDispatcherMutation = {
    result: RelayErrorFragment | RelayerResultFragment;
};
export type CreateCommentTypedDataMutationVariables = Types.Exact<{
    request: Types.CreatePublicCommentRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateCommentTypedDataMutation = {
    result: CreateCommentTypedDataFragment;
};
export type CreateCommentViaDispatcherMutationVariables = Types.Exact<{
    request: Types.CreatePublicCommentRequest;
}>;
export type CreateCommentViaDispatcherMutation = {
    result: RelayErrorFragment | RelayerResultFragment;
};
export type CreateMirrorTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateMirrorRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateMirrorTypedDataMutation = {
    result: CreateMirrorTypedDataFragment;
};
export type CreateMirrorViaDispatcherMutationVariables = Types.Exact<{
    request: Types.CreateMirrorRequest;
}>;
export type CreateMirrorViaDispatcherMutation = {
    result: RelayErrorFragment | RelayerResultFragment;
};
export type CreateCollectTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateCollectRequest;
    options?: Types.InputMaybe<Types.TypedDataOptions>;
}>;
export type CreateCollectTypedDataMutation = {
    result: CreateCollectTypedDataFragment;
};
export type CreateAttachMediaDataMutationVariables = Types.Exact<{
    request: Types.PublicMediaRequest;
}>;
export type CreateAttachMediaDataMutation = {
    result: PublicMediaResultsFragment;
};
export type HidePublicationMutationVariables = Types.Exact<{
    request: Types.HidePublicationRequest;
}>;
export type HidePublicationMutation = {
    hidePublication: void | null;
};
export type ReportPublicationMutationVariables = Types.Exact<{
    request: Types.ReportPublicationRequest;
}>;
export type ReportPublicationMutation = {
    reportPublication: void | null;
};
export type CreateDataAvailabilityPostTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateDataAvailabilityPostRequest;
}>;
export type CreateDataAvailabilityPostTypedDataMutation = {
    result: CreatePostTypedDataFragment;
};
export type CreateDataAvailabilityPostViaDispatcherMutationVariables = Types.Exact<{
    request: Types.CreateDataAvailabilityPostRequest;
}>;
export type CreateDataAvailabilityPostViaDispatcherMutation = {
    result: CreateDataAvailabilityPublicationResultFragment | RelayErrorFragment;
};
export type CreateDataAvailabilityCommentTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateDataAvailabilityCommentRequest;
}>;
export type CreateDataAvailabilityCommentTypedDataMutation = {
    result: CreateCommentTypedDataFragment;
};
export type CreateDataAvailabilityCommentViaDispatcherMutationVariables = Types.Exact<{
    request: Types.CreateDataAvailabilityCommentRequest;
}>;
export type CreateDataAvailabilityCommentViaDispatcherMutation = {
    result: CreateDataAvailabilityPublicationResultFragment | RelayErrorFragment;
};
export type CreateDataAvailabilityMirrorTypedDataMutationVariables = Types.Exact<{
    request: Types.CreateDataAvailabilityMirrorRequest;
}>;
export type CreateDataAvailabilityMirrorTypedDataMutation = {
    result: CreateMirrorTypedDataFragment;
};
export type CreateDataAvailabilityMirrorViaDispatcherMutationVariables = Types.Exact<{
    request: Types.CreateDataAvailabilityMirrorRequest;
}>;
export type CreateDataAvailabilityMirrorViaDispatcherMutation = {
    result: CreateDataAvailabilityPublicationResultFragment | RelayErrorFragment;
};
export declare const PublicationStatsFragmentDoc: import("graphql").DocumentNode;
export declare const MediaOutputFragmentDoc: import("graphql").DocumentNode;
export declare const PublicMediaResultsFragmentDoc: import("graphql").DocumentNode;
export declare const CreatePostTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const CreateCommentTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const CreateMirrorTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const CreateCollectTypedDataFragmentDoc: import("graphql").DocumentNode;
export declare const PublicationDocument: import("graphql").DocumentNode;
export declare const PublicationStatsDocument: import("graphql").DocumentNode;
export declare const PublicationsDocument: import("graphql").DocumentNode;
export declare const ValidatePublicationMetadataDocument: import("graphql").DocumentNode;
export declare const WhoCollectedPublicationDocument: import("graphql").DocumentNode;
export declare const ProfilePublicationsForSaleDocument: import("graphql").DocumentNode;
export declare const PublicationMetadataStatusDocument: import("graphql").DocumentNode;
export declare const CreatePostTypedDataDocument: import("graphql").DocumentNode;
export declare const CreatePostViaDispatcherDocument: import("graphql").DocumentNode;
export declare const CreateCommentTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateCommentViaDispatcherDocument: import("graphql").DocumentNode;
export declare const CreateMirrorTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateMirrorViaDispatcherDocument: import("graphql").DocumentNode;
export declare const CreateCollectTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateAttachMediaDataDocument: import("graphql").DocumentNode;
export declare const HidePublicationDocument: import("graphql").DocumentNode;
export declare const ReportPublicationDocument: import("graphql").DocumentNode;
export declare const CreateDataAvailabilityPostTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateDataAvailabilityPostViaDispatcherDocument: import("graphql").DocumentNode;
export declare const CreateDataAvailabilityCommentTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateDataAvailabilityCommentViaDispatcherDocument: import("graphql").DocumentNode;
export declare const CreateDataAvailabilityMirrorTypedDataDocument: import("graphql").DocumentNode;
export declare const CreateDataAvailabilityMirrorViaDispatcherDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    Publication(variables: PublicationQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: PublicationQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    PublicationStats(variables: PublicationStatsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: PublicationStatsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    Publications(variables: PublicationsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: PublicationsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ValidatePublicationMetadata(variables: ValidatePublicationMetadataQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ValidatePublicationMetadataQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    WhoCollectedPublication(variables: WhoCollectedPublicationQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: WhoCollectedPublicationQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ProfilePublicationsForSale(variables: ProfilePublicationsForSaleQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfilePublicationsForSaleQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    PublicationMetadataStatus(variables: PublicationMetadataStatusQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: PublicationMetadataStatusQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreatePostTypedData(variables: CreatePostTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreatePostTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreatePostViaDispatcher(variables: CreatePostViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreatePostViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateCommentTypedData(variables: CreateCommentTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateCommentTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateCommentViaDispatcher(variables: CreateCommentViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateCommentViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateMirrorTypedData(variables: CreateMirrorTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateMirrorTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateMirrorViaDispatcher(variables: CreateMirrorViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateMirrorViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateCollectTypedData(variables: CreateCollectTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateCollectTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateAttachMediaData(variables: CreateAttachMediaDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateAttachMediaDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    HidePublication(variables: HidePublicationMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: HidePublicationMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ReportPublication(variables: ReportPublicationMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ReportPublicationMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateDataAvailabilityPostTypedData(variables: CreateDataAvailabilityPostTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateDataAvailabilityPostTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateDataAvailabilityPostViaDispatcher(variables: CreateDataAvailabilityPostViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateDataAvailabilityPostViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateDataAvailabilityCommentTypedData(variables: CreateDataAvailabilityCommentTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateDataAvailabilityCommentTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateDataAvailabilityCommentViaDispatcher(variables: CreateDataAvailabilityCommentViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateDataAvailabilityCommentViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateDataAvailabilityMirrorTypedData(variables: CreateDataAvailabilityMirrorTypedDataMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateDataAvailabilityMirrorTypedDataMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateDataAvailabilityMirrorViaDispatcher(variables: CreateDataAvailabilityMirrorViaDispatcherMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateDataAvailabilityMirrorViaDispatcherMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
