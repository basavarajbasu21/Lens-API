import * as Types from '../../graphql/types.generated';
import { PostFragment, CommentFragment, MirrorFragment, CommonPaginatedResultInfoFragment, ProfileFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type ExplorePublicationsQueryVariables = Types.Exact<{
    request: Types.ExplorePublicationRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type ExplorePublicationsQuery = {
    result: {
        items: Array<CommentFragment | MirrorFragment | PostFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type ExploreProfilesQueryVariables = Types.Exact<{
    request: Types.ExploreProfilesRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type ExploreProfilesQuery = {
    result: {
        items: Array<ProfileFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export declare const ExplorePublicationsDocument: import("graphql").DocumentNode;
export declare const ExploreProfilesDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    ExplorePublications(variables: ExplorePublicationsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ExplorePublicationsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ExploreProfiles(variables: ExploreProfilesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ExploreProfilesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
