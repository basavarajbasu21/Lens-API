import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { ProfileFragment } from '../graphql/fragments.generated';
import type { PublicationFragment } from '../graphql/types';
import type { ExploreProfilesRequest, ExplorePublicationRequest } from '../graphql/types.generated';
import { PaginatedResult } from '../helpers';
/**
 * Explore Lens Protocol.
 *
 * @group LensClient Modules
 */
export declare class Explore {
    private readonly config;
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication?: Authentication);
    /**
     * Explore publications
     *
     * @param request - Request object for the query
     * @param observerId - Optional id of a profile that is the observer for this request
     * @returns Array of {@link PublicationFragment} wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * import { PublicationSortCriteria } from '@lens-protocol/client';
     *
     * const result = await client.explore.publications({
     *   sortCriteria: PublicationSortCriteria.TopCommented
     * });
     * ```
     */
    publications(request: ExplorePublicationRequest, observerId?: string): Promise<PaginatedResult<PublicationFragment>>;
    /**
     * Explore profiles
     *
     * @param request - Request object for the query
     * @param observerId - Optional id of a profile that is the observer for this request
     * @returns Array of {@link ProfileFragment} wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * import { ProfileSortCriteria } from '@lens-protocol/client';
     *
     * const result = await client.explore.profiles({
     *   sortCriteria: ProfileSortCriteria.MostFollowers
     * })
     * ```
     */
    profiles(request: ExploreProfilesRequest, observerId?: string): Promise<PaginatedResult<ProfileFragment>>;
}
