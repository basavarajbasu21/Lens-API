import * as Types from '../../graphql/types.generated';
import { RelayerResultFragment, RelayErrorFragment, CreateDataAvailabilityPublicationResultFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type TransactionIndexedResultFragment = {
    __typename: 'TransactionIndexedResult';
    indexed: boolean;
    txHash: string;
};
export type TransactionErrorFragment = {
    __typename: 'TransactionError';
    reason: Types.TransactionErrorReasons;
};
export type HasTxHashBeenIndexedQueryVariables = Types.Exact<{
    request: Types.HasTxHashBeenIndexedRequest;
}>;
export type HasTxHashBeenIndexedQuery = {
    result: TransactionErrorFragment | TransactionIndexedResultFragment;
};
export type BroadcastProtocolCallMutationVariables = Types.Exact<{
    request: Types.BroadcastRequest;
}>;
export type BroadcastProtocolCallMutation = {
    result: RelayErrorFragment | RelayerResultFragment;
};
export type BroadcastDataAvailabilityMutationVariables = Types.Exact<{
    request: Types.BroadcastRequest;
}>;
export type BroadcastDataAvailabilityMutation = {
    result: CreateDataAvailabilityPublicationResultFragment | RelayErrorFragment;
};
export declare const TransactionIndexedResultFragmentDoc: import("graphql").DocumentNode;
export declare const TransactionErrorFragmentDoc: import("graphql").DocumentNode;
export declare const HasTxHashBeenIndexedDocument: import("graphql").DocumentNode;
export declare const BroadcastProtocolCallDocument: import("graphql").DocumentNode;
export declare const BroadcastDataAvailabilityDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    HasTxHashBeenIndexed(variables: HasTxHashBeenIndexedQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: HasTxHashBeenIndexedQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    BroadcastProtocolCall(variables: BroadcastProtocolCallMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: BroadcastProtocolCallMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    BroadcastDataAvailability(variables: BroadcastDataAvailabilityMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: BroadcastDataAvailabilityMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
