import * as Types from '../../graphql/types.generated';
import { CommonPaginatedResultInfoFragment, Erc20AmountFragment, PostFragment, CommentFragment, MirrorFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type ProfilePublicationRevenueQueryVariables = Types.Exact<{
    request: Types.ProfilePublicationRevenueQueryRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type ProfilePublicationRevenueQuery = {
    result: {
        items: Array<PublicationRevenueFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type PublicationRevenueQueryVariables = Types.Exact<{
    request: Types.PublicationRevenueQueryRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type PublicationRevenueQuery = {
    result: PublicationRevenueFragment | null;
};
export type ProfileFollowRevenueQueryVariables = Types.Exact<{
    request: Types.ProfileFollowRevenueQueryRequest;
}>;
export type ProfileFollowRevenueQuery = {
    result: {
        revenues: Array<RevenueAggregateFragment>;
    };
};
export type RevenueAggregateFragment = {
    __typename: 'RevenueAggregate';
    total: Erc20AmountFragment;
};
export type PublicationRevenueFragment = {
    __typename: 'PublicationRevenue';
    publication: CommentFragment | MirrorFragment | PostFragment;
    revenue: RevenueAggregateFragment;
};
export declare const RevenueAggregateFragmentDoc: import("graphql").DocumentNode;
export declare const PublicationRevenueFragmentDoc: import("graphql").DocumentNode;
export declare const ProfilePublicationRevenueDocument: import("graphql").DocumentNode;
export declare const PublicationRevenueDocument: import("graphql").DocumentNode;
export declare const ProfileFollowRevenueDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    ProfilePublicationRevenue(variables: ProfilePublicationRevenueQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfilePublicationRevenueQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    PublicationRevenue(variables: PublicationRevenueQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: PublicationRevenueQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ProfileFollowRevenue(variables: ProfileFollowRevenueQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfileFollowRevenueQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
