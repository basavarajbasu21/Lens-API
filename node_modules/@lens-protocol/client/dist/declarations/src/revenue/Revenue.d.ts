import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { ProfileFollowRevenueQueryRequest, ProfilePublicationRevenueQueryRequest, PublicationRevenueQueryRequest } from '../graphql/types.generated';
import { PaginatedResult } from '../helpers';
import { PublicationRevenueFragment, RevenueAggregateFragment } from './graphql/revenue.generated';
/**
 * With built-in ways to earn on Lens Protocol, see the breakdown of what you have earned.
 *
 * @group LensClient Modules
 */
export declare class Revenue {
    private readonly config;
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication?: Authentication);
    /**
     * Fetch revenue of a profile's publications.
     * Return only publications that have earned any fees.
     *
     * @param request - Request object for the query
     * @param observerId - Optional id of a profile that is the observer for this request
     * @returns Array of {@link PublicationRevenueFragment} wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.revenue.profilePublication({
     *   profileId: '0x123',
     * });
     * ```
     */
    profilePublication(request: ProfilePublicationRevenueQueryRequest, observerId?: string): Promise<PaginatedResult<PublicationRevenueFragment>>;
    /**
     * Fetch the amounts earned on the requested profile for all follows, grouped by currency.
     *
     * @param request - Request object for the query
     * @returns Array of {@link RevenueAggregateFragment}
     *
     * @example
     * ```ts
     * const result = await client.revenue.profileFollow({
     *   profileId: '0x123',
     * });
     * ```
     */
    profileFollow(request: ProfileFollowRevenueQueryRequest): Promise<RevenueAggregateFragment[]>;
    /**
     * Fetch the amounts earned on the requested publication.
     *
     * @param request - Request object for the query
     * @param observerId - Optional id of a profile that is the observer for this request
     * @returns Publication revenue
     *
     * @example
     * ```ts
     * const result = await client.revenue.publication({
     *  publicationId: '0x123',
     * });
     * ```
     */
    publication(request: PublicationRevenueQueryRequest, observerId?: string): Promise<PublicationRevenueFragment | null>;
}
