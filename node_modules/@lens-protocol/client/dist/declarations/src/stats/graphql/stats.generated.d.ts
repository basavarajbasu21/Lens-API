import * as Types from '../../graphql/types.generated';
import { Erc20Fragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type GlobalProtocolStatsFragment = {
    totalProfiles: number;
    totalBurntProfiles: number;
    totalPosts: number;
    totalMirrors: number;
    totalComments: number;
    totalCollects: number;
    totalFollows: number;
    totalRevenue: Array<{
        value: string;
        asset: Erc20Fragment;
    }>;
};
export type GlobalProtocolStatsQueryVariables = Types.Exact<{
    request?: Types.InputMaybe<Types.GlobalProtocolStatsRequest>;
}>;
export type GlobalProtocolStatsQuery = {
    result: GlobalProtocolStatsFragment;
};
export declare const GlobalProtocolStatsFragmentDoc: import("graphql").DocumentNode;
export declare const GlobalProtocolStatsDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    GlobalProtocolStats(variables?: GlobalProtocolStatsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: GlobalProtocolStatsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
