import * as Types from '../../graphql/types.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type ProxyActionStatusResultFragment = {
    __typename: 'ProxyActionStatusResult';
    txHash: string;
    txId: string;
    status: Types.ProxyActionStatusTypes;
};
export type ProxyActionErrorFragment = {
    __typename: 'ProxyActionError';
    reason: string;
    lastKnownTxId: string | null;
};
export type ProxyActionQueuedFragment = {
    __typename: 'ProxyActionQueued';
    queuedAt: string;
};
export type ProxyActionStatusQueryVariables = Types.Exact<{
    proxyActionId: Types.Scalars['ProxyActionId'];
}>;
export type ProxyActionStatusQuery = {
    result: ProxyActionErrorFragment | ProxyActionQueuedFragment | ProxyActionStatusResultFragment;
};
export type ProxyActionMutationVariables = Types.Exact<{
    request: Types.ProxyActionRequest;
}>;
export type ProxyActionMutation = {
    result: string;
};
export declare const ProxyActionStatusResultFragmentDoc: import("graphql").DocumentNode;
export declare const ProxyActionErrorFragmentDoc: import("graphql").DocumentNode;
export declare const ProxyActionQueuedFragmentDoc: import("graphql").DocumentNode;
export declare const ProxyActionStatusDocument: import("graphql").DocumentNode;
export declare const ProxyActionDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    ProxyActionStatus(variables: ProxyActionStatusQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProxyActionStatusQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ProxyAction(variables: ProxyActionMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProxyActionMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
