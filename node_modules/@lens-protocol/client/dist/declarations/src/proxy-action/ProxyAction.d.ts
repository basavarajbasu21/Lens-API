import type { PromiseResult } from '@lens-protocol/shared-kernel';
import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { CredentialsExpiredError, NotAuthenticatedError } from '../consts/errors';
import { ProxyActionErrorFragment, ProxyActionQueuedFragment, ProxyActionStatusResultFragment } from './graphql/proxy-action.generated';
export declare class StatusPollingError extends Error {
    name: "StatusPollingError";
    message: string;
}
/**
 * ProxyAction enables signless follow and collect actions.
 *
 * @remarks
 *
 * ProxyAction enables actions like follow and collect
 * to be signless. This only works if the modules assigned
 * to those actions are free and have no cost to them.
 *
 * @group LensClient Modules
 */
export declare class ProxyAction {
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication: Authentication);
    /**
     * Follow a profile.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param profileId - profile id to follow
     * @returns {@link PromiseResult} with a proxyActionId
     *
     * @example
     * ```ts
     * const result = await client.proxyAction.freeFollow('0x123');
     * ```
     */
    freeFollow(profileId: string): PromiseResult<string, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Collect a publication.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param publicationId - publication id to collect
     * @returns {@link PromiseResult} with a proxyActionId
     *
     * @example
     * ```ts
     * const result = await client.proxyAction.freeCollect('0x123-0x456');
     * ```
     */
    freeCollect(publicationId: string): PromiseResult<string, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Check the status of a proxy action.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param proxyActionId - proxy action id to check
     * @returns {@link PromiseResult} with a {@link ProxyActionStatusResultFragment} or {@link ProxyActionErrorFragment} or {@link ProxyActionQueuedFragment}
     *
     * @example
     * ```ts
     * const result = await client.proxyAction.checkStatus(proxyActionId);
     * ```
     */
    checkStatus(proxyActionId: string): PromiseResult<ProxyActionStatusResultFragment | ProxyActionErrorFragment | ProxyActionQueuedFragment, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Wait for a proxy action to complete.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param proxyActionId - proxy action id to wait for
     * @returns {@link PromiseResult} with a {@link ProxyActionStatusResultFragment} or {@link ProxyActionErrorFragment} or {@link ProxyActionQueuedFragment}
     *
     * @example
     * ```ts
     * const result = await client.proxyAction.waitForStatusComplete(proxyActionId);
     * ```
     */
    waitForStatusComplete(proxyActionId: string): PromiseResult<ProxyActionStatusResultFragment | ProxyActionErrorFragment | ProxyActionQueuedFragment, CredentialsExpiredError | NotAuthenticatedError>;
}
