import * as Types from '../../graphql/types.generated';
import { ProfileFragment, PostFragment, CommentFragment, MirrorFragment, CommonPaginatedResultInfoFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type ElectedMirrorFragment = {
    __typename: 'ElectedMirror';
    mirrorId: string;
    timestamp: string;
    profile: ProfileFragment;
};
export type MirrorEventFragment = {
    __typename: 'MirrorEvent';
    timestamp: string;
    profile: ProfileFragment;
};
export type CollectedEventFragment = {
    __typename: 'CollectedEvent';
    timestamp: string;
    profile: ProfileFragment;
};
export type ReactionEventFragment = {
    __typename: 'ReactionEvent';
    reaction: Types.ReactionTypes;
    timestamp: string;
    profile: ProfileFragment;
};
export type FeedItemFragment = {
    __typename: 'FeedItem';
    root: CommentFragment | PostFragment;
    comments: Array<CommentFragment> | null;
    electedMirror: ElectedMirrorFragment | null;
    mirrors: Array<MirrorEventFragment>;
    collects: Array<CollectedEventFragment>;
    reactions: Array<ReactionEventFragment>;
};
export type FeedQueryVariables = Types.Exact<{
    request: Types.FeedRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type FeedQuery = {
    result: {
        items: Array<FeedItemFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type FeedHighlightsQueryVariables = Types.Exact<{
    request: Types.FeedHighlightsRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type FeedHighlightsQuery = {
    result: {
        items: Array<CommentFragment | MirrorFragment | PostFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export declare const ElectedMirrorFragmentDoc: import("graphql").DocumentNode;
export declare const MirrorEventFragmentDoc: import("graphql").DocumentNode;
export declare const CollectedEventFragmentDoc: import("graphql").DocumentNode;
export declare const ReactionEventFragmentDoc: import("graphql").DocumentNode;
export declare const FeedItemFragmentDoc: import("graphql").DocumentNode;
export declare const FeedDocument: import("graphql").DocumentNode;
export declare const FeedHighlightsDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    Feed(variables: FeedQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: FeedQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    FeedHighlights(variables: FeedHighlightsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: FeedHighlightsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
