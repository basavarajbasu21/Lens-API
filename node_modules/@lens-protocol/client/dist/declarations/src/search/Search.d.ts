import { Prettify } from '@lens-protocol/shared-kernel';
import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { CommentFragment, PostFragment, ProfileFragment } from '../graphql/fragments.generated';
import { PaginatedResult } from '../helpers';
import { SearchProfilesQueryVariables, SearchPublicationsQueryVariables } from './graphql/search.generated';
export type SearchProfilesQuery = Prettify<Omit<SearchProfilesQueryVariables, 'mediaTransformPublication' | 'mediaTransformProfilePicture' | 'mediaTransformProfileCover'>>;
export type SearchPublicationsQuery = Prettify<Omit<SearchPublicationsQueryVariables, 'mediaTransformPublication' | 'mediaTransformProfilePicture' | 'mediaTransformProfileCover'>>;
/**
 * Search for profiles and publications.
 *
 * @group LensClient Modules
 */
export declare class Search {
    private readonly config;
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication?: Authentication);
    /**
     * Search for profiles.
     *
     * @param request - Request object for the query
     * @returns Array of {@link ProfileFragment} wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.search.profiles({
     *   query: 'lens',
     * });
     * ```
     */
    profiles(request: SearchProfilesQuery): Promise<PaginatedResult<ProfileFragment>>;
    /**
     * Search for publications.
     *
     * @param request - Request object for the query
     * @returns Array of {@link CommentFragment} and/or {@link PostFragment} wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.search.publications({
     *  query: 'lens',
     * });
     * ```
     */
    publications(request: SearchPublicationsQuery): Promise<PaginatedResult<CommentFragment | PostFragment>>;
}
