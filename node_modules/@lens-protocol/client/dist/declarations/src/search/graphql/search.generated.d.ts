import * as Types from '../../graphql/types.generated';
import { PostFragment, CommentFragment, CommonPaginatedResultInfoFragment, ProfileFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type SearchPublicationsQueryVariables = Types.Exact<{
    limit?: Types.InputMaybe<Types.Scalars['LimitScalar']>;
    cursor?: Types.InputMaybe<Types.Scalars['Cursor']>;
    query: Types.Scalars['Search'];
    sources?: Types.InputMaybe<Array<Types.Scalars['Sources']> | Types.Scalars['Sources']>;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformPublication?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type SearchPublicationsQuery = {
    result: {
        __typename: 'ProfileSearchResult';
    } | {
        __typename: 'PublicationSearchResult';
        items: Array<CommentFragment | PostFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type SearchProfilesQueryVariables = Types.Exact<{
    limit: Types.Scalars['LimitScalar'];
    cursor?: Types.InputMaybe<Types.Scalars['Cursor']>;
    query: Types.Scalars['Search'];
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type SearchProfilesQuery = {
    result: {
        __typename: 'ProfileSearchResult';
        items: Array<ProfileFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    } | {
        __typename: 'PublicationSearchResult';
    };
};
export declare const SearchPublicationsDocument: import("graphql").DocumentNode;
export declare const SearchProfilesDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    SearchPublications(variables: SearchPublicationsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: SearchPublicationsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    SearchProfiles(variables: SearchProfilesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: SearchProfilesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
