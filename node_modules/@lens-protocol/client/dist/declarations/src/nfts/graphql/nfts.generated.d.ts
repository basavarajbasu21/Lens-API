import * as Types from '../../graphql/types.generated';
import { CommonPaginatedResultInfoFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type NftFragment = {
    __typename: 'NFT';
    contractName: string;
    contractAddress: string;
    symbol: string;
    tokenId: string;
    name: string;
    description: string;
    contentURI: string;
    chainId: number;
    collectionName: string;
    ercType: string;
    owners: Array<{
        amount: number;
        address: string;
    }>;
    originalContent: {
        uri: string;
        animatedUrl: string | null;
        metaType: string;
    };
};
export type NftGalleryFragment = {
    id: string;
    name: string;
    profileId: string;
    createdAt: string;
    updatedAt: string;
    items: Array<NftFragment>;
};
export type NftOwnershipChallengeResultFragment = {
    id: string;
    text: string;
    timeout: string;
};
export type NftsQueryVariables = Types.Exact<{
    request: Types.NfTsRequest;
}>;
export type NftsQuery = {
    result: {
        items: Array<NftFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export type NftOwnershipChallengeQueryVariables = Types.Exact<{
    request: Types.NftOwnershipChallengeRequest;
}>;
export type NftOwnershipChallengeQuery = {
    result: NftOwnershipChallengeResultFragment;
};
export type ProfileGalleriesQueryVariables = Types.Exact<{
    request: Types.NftGalleriesRequest;
}>;
export type ProfileGalleriesQuery = {
    result: Array<NftGalleryFragment>;
};
export type CreateNftGalleryMutationVariables = Types.Exact<{
    request: Types.NftGalleryCreateRequest;
}>;
export type CreateNftGalleryMutation = {
    result: string;
};
export type UpdateNftGalleryInfoMutationVariables = Types.Exact<{
    request: Types.NftGalleryUpdateInfoRequest;
}>;
export type UpdateNftGalleryInfoMutation = {
    updateNftGalleryInfo: void | null;
};
export type UpdateNftGalleryOrderMutationVariables = Types.Exact<{
    request: Types.NftGalleryUpdateItemOrderRequest;
}>;
export type UpdateNftGalleryOrderMutation = {
    updateNftGalleryOrder: void | null;
};
export type UpdateNftGalleryItemsMutationVariables = Types.Exact<{
    request: Types.NftGalleryUpdateItemsRequest;
}>;
export type UpdateNftGalleryItemsMutation = {
    updateNftGalleryItems: void | null;
};
export type DeleteNftGalleryMutationVariables = Types.Exact<{
    request: Types.NftGalleryDeleteRequest;
}>;
export type DeleteNftGalleryMutation = {
    deleteNftGallery: void | null;
};
export declare const NftFragmentDoc: import("graphql").DocumentNode;
export declare const NftGalleryFragmentDoc: import("graphql").DocumentNode;
export declare const NftOwnershipChallengeResultFragmentDoc: import("graphql").DocumentNode;
export declare const NftsDocument: import("graphql").DocumentNode;
export declare const NftOwnershipChallengeDocument: import("graphql").DocumentNode;
export declare const ProfileGalleriesDocument: import("graphql").DocumentNode;
export declare const CreateNftGalleryDocument: import("graphql").DocumentNode;
export declare const UpdateNftGalleryInfoDocument: import("graphql").DocumentNode;
export declare const UpdateNftGalleryOrderDocument: import("graphql").DocumentNode;
export declare const UpdateNftGalleryItemsDocument: import("graphql").DocumentNode;
export declare const DeleteNftGalleryDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    Nfts(variables: NftsQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: NftsQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    NftOwnershipChallenge(variables: NftOwnershipChallengeQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: NftOwnershipChallengeQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ProfileGalleries(variables: ProfileGalleriesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ProfileGalleriesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    CreateNFTGallery(variables: CreateNftGalleryMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: CreateNftGalleryMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    UpdateNFTGalleryInfo(variables: UpdateNftGalleryInfoMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: UpdateNftGalleryInfoMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    UpdateNFTGalleryOrder(variables: UpdateNftGalleryOrderMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: UpdateNftGalleryOrderMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    UpdateNFTGalleryItems(variables: UpdateNftGalleryItemsMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: UpdateNftGalleryItemsMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    DeleteNFTGallery(variables: DeleteNftGalleryMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: DeleteNftGalleryMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
