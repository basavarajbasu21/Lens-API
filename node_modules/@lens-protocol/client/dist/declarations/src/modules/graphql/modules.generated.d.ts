import * as Types from '../../graphql/types.generated';
import { Erc20Fragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type ModuleInfoFragment = {
    __typename: 'ModuleInfo';
    name: string;
    type: string;
};
export type EnabledModuleFragment = {
    __typename: 'EnabledModule';
    moduleName: string;
    contractAddress: string;
    inputParams: Array<ModuleInfoFragment>;
    redeemParams: Array<ModuleInfoFragment>;
    returnDataParams: Array<ModuleInfoFragment>;
};
export type EnabledModulesFragment = {
    __typename: 'EnabledModules';
    collectModules: Array<EnabledModuleFragment>;
    followModules: Array<EnabledModuleFragment>;
    referenceModules: Array<EnabledModuleFragment>;
};
export type ApprovedAllowanceAmountFragment = {
    currency: string;
    module: string;
    contractAddress: string;
    allowance: string;
};
export type GenerateModuleCurrencyApprovalFragment = {
    to: string;
    from: string;
    data: string;
};
export type EnabledModulesQueryVariables = Types.Exact<{
    [key: string]: never;
}>;
export type EnabledModulesQuery = {
    result: EnabledModulesFragment;
};
export type EnabledModuleCurrenciesQueryVariables = Types.Exact<{
    [key: string]: never;
}>;
export type EnabledModuleCurrenciesQuery = {
    result: Array<Erc20Fragment>;
};
export type ApprovedModuleAllowanceAmountQueryVariables = Types.Exact<{
    request: Types.ApprovedModuleAllowanceAmountRequest;
}>;
export type ApprovedModuleAllowanceAmountQuery = {
    result: Array<ApprovedAllowanceAmountFragment>;
};
export type GenerateModuleCurrencyApprovalDataQueryVariables = Types.Exact<{
    request: Types.GenerateModuleCurrencyApprovalDataRequest;
}>;
export type GenerateModuleCurrencyApprovalDataQuery = {
    result: GenerateModuleCurrencyApprovalFragment;
};
export declare const ModuleInfoFragmentDoc: import("graphql").DocumentNode;
export declare const EnabledModuleFragmentDoc: import("graphql").DocumentNode;
export declare const EnabledModulesFragmentDoc: import("graphql").DocumentNode;
export declare const ApprovedAllowanceAmountFragmentDoc: import("graphql").DocumentNode;
export declare const GenerateModuleCurrencyApprovalFragmentDoc: import("graphql").DocumentNode;
export declare const EnabledModulesDocument: import("graphql").DocumentNode;
export declare const EnabledModuleCurrenciesDocument: import("graphql").DocumentNode;
export declare const ApprovedModuleAllowanceAmountDocument: import("graphql").DocumentNode;
export declare const GenerateModuleCurrencyApprovalDataDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    EnabledModules(variables?: EnabledModulesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: EnabledModulesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    EnabledModuleCurrencies(variables?: EnabledModuleCurrenciesQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: EnabledModuleCurrenciesQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    ApprovedModuleAllowanceAmount(variables: ApprovedModuleAllowanceAmountQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: ApprovedModuleAllowanceAmountQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    GenerateModuleCurrencyApprovalData(variables: GenerateModuleCurrencyApprovalDataQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: GenerateModuleCurrencyApprovalDataQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
