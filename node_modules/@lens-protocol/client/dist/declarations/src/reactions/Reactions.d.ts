import type { PromiseResult } from '@lens-protocol/shared-kernel';
import type { Authentication } from '../authentication';
import type { LensConfig } from '../consts/config';
import type { CredentialsExpiredError, NotAuthenticatedError } from '../consts/errors';
import type { ReactionRequest, WhoReactedPublicationRequest } from '../graphql/types.generated';
import { PaginatedResult } from '../helpers';
import { WhoReactedResultFragment } from './graphql/reactions.generated';
/**
 * React to publications off-chain.
 *
 * @group LensClient Modules
 */
export declare class Reactions {
    private readonly config;
    private readonly authentication;
    private readonly sdk;
    constructor(config: LensConfig, authentication?: Authentication);
    /**
     * Add a reaction to a publication.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the mutation
     * @returns {@link PromiseResult} with void
     *
     * @example
     * ```ts
     * import { ReactionTypes } from '@lens-protocol/client';
     *
     * await client.reactions.add({
     *   profileId: '0x01',
     *   publicationId: '0x02-0x01',
     *   reaction: ReactionTypes.Upvote,
     * });
     * ```
     */
    add(request: ReactionRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Remove a reaction from a publication.
     * If the reaction does not exist, this will return an error.
     *
     * ⚠️ Requires authenticated LensClient.
     *
     * @param request - Request object for the mutation
     * @returns {@link PromiseResult} with void
     *
     * @example
     * ```ts
     * import { ReactionTypes } from '@lens-protocol/client';
     *
     * await client.reactions.remove({
     *   profileId: '0x01',
     *   publicationId: '0x02-0x01',
     *   reaction: ReactionTypes.Upvote,
     * });
     * ```
     */
    remove(request: ReactionRequest): PromiseResult<void, CredentialsExpiredError | NotAuthenticatedError>;
    /**
     * Fetch who reacted to a publication.
     *
     * @param request - Request object for the query
     * @param observerId - Optional id of a profile that is the observer for this request
     * @returns Array of {@link WhoReactedResultFragment} wrapped in {@link PaginatedResult}
     *
     * @example
     * ```ts
     * const result = await client.reactions.toPublication({
     *   publicationId: '0x01-0x02',
     * });
     * ```
     */
    toPublication(request: WhoReactedPublicationRequest, observerId?: string): Promise<PaginatedResult<WhoReactedResultFragment>>;
}
