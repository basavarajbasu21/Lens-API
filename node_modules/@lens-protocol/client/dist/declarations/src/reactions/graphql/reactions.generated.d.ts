import * as Types from '../../graphql/types.generated';
import { ProfileFragment, CommonPaginatedResultInfoFragment } from '../../graphql/fragments.generated';
import { GraphQLClient } from 'graphql-request';
import * as Dom from 'graphql-request/dist/types.dom';
export type AddReactionMutationVariables = Types.Exact<{
    request: Types.ReactionRequest;
}>;
export type AddReactionMutation = {
    addReaction: void | null;
};
export type RemoveReactionMutationVariables = Types.Exact<{
    request: Types.ReactionRequest;
}>;
export type RemoveReactionMutation = {
    removeReaction: void | null;
};
export type WhoReactedResultFragment = {
    __typename: 'WhoReactedResult';
    reactionId: string;
    reaction: Types.ReactionTypes;
    reactionAt: string;
    profile: ProfileFragment;
};
export type WhoReactedPublicationQueryVariables = Types.Exact<{
    request: Types.WhoReactedPublicationRequest;
    observerId?: Types.InputMaybe<Types.Scalars['ProfileId']>;
    mediaTransformProfilePicture?: Types.InputMaybe<Types.MediaTransformParams>;
    mediaTransformProfileCover?: Types.InputMaybe<Types.MediaTransformParams>;
}>;
export type WhoReactedPublicationQuery = {
    result: {
        items: Array<WhoReactedResultFragment>;
        pageInfo: CommonPaginatedResultInfoFragment;
    };
};
export declare const WhoReactedResultFragmentDoc: import("graphql").DocumentNode;
export declare const AddReactionDocument: import("graphql").DocumentNode;
export declare const RemoveReactionDocument: import("graphql").DocumentNode;
export declare const WhoReactedPublicationDocument: import("graphql").DocumentNode;
export type SdkFunctionWrapper = <T>(action: (requestHeaders?: Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;
export declare function getSdk(client: GraphQLClient, withWrapper?: SdkFunctionWrapper): {
    AddReaction(variables: AddReactionMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: AddReactionMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    RemoveReaction(variables: RemoveReactionMutationVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: RemoveReactionMutation;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
    WhoReactedPublication(variables: WhoReactedPublicationQueryVariables, requestHeaders?: Dom.RequestInit['headers']): Promise<{
        data: WhoReactedPublicationQuery;
        extensions?: any;
        headers: Dom.Headers;
        status: number;
    }>;
};
export type Sdk = ReturnType<typeof getSdk>;
